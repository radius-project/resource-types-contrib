import { DaprMetadata, result } from '../../../../common/modules/bicep/types.bicep'

extension kubernetes with {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
} as kubernetes

@description('Information about what resource is calling this Recipe. Generated by Radius. For more information visit https://docs.radapp.io/reference/context-schema/ ')
param context object

// Inputs 
var inputs = context.resource.properties
var type string = inputs.?type ?? 'state.redis'
var version string = inputs.?version ?? 'v1'
var metadata DaprMetadata[] = inputs.?metadata ?? []
var secretStore string = inputs.?secretStore ?? ''

// Radius marking to identify resources it created.
var radiusTags = {
  resource: context.resource.name
  app: context.application == null ? '' : context.application.name
}
var resourceMetadata = {
  name: 'daprstate-${uniqueString(context.resource.id)}'
  namespace: context.runtime.kubernetes.namespace
  labels: radiusTags
}

/************** DEFAULT STATE STORE ***************/
var defaultComponentType string = 'state.redis'
var redisTag string = '7'
var redisPort int = 6379

resource redis 'apps/Deployment@v1' = if (type == defaultComponentType){
  metadata: resourceMetadata
  spec: {
    selector: { matchLabels: radiusTags }
    template: {
      metadata: {
        labels: union(radiusTags, {
          // Label pods with the application name so `rad run` can find the logs.
          'radapp.io/application': radiusTags.app
        })
      }
      spec: {
        containers: [
          {
            name: 'redis'
            image: 'redis:${redisTag}'
            ports: [{ containerPort: redisPort }]
          }
        ]
      }
    }
  }
}

resource svc 'core/Service@v1' = if (type == defaultComponentType) {
  metadata: resourceMetadata
  spec: {
    type: 'ClusterIP'
    selector: radiusTags
    ports: [{ port: redisPort }]
  }
}

var redisResourceIds array = [
  '/planes/kubernetes/local/namespaces/${resourceMetadata.namespace}/providers/apps/Deployment/${resourceMetadata.name}'
  '/planes/kubernetes/local/namespaces/${resourceMetadata.namespace}/providers/core/Service/${resourceMetadata.name}'
]

var redisMetadata array = [
  {
    name: 'redisHost'
    value: '${resourceMetadata.name}.${resourceMetadata.namespace}.svc.cluster.local:${redisPort}'
  }
  {
    name: 'redisPassword'
    value: ''
  }
]


/************** DAPR COMPONENT ***************/
#disable-next-line BCP081
resource daprComponent 'dapr.io/Component@v1alpha1' = {
  metadata: resourceMetadata
  auth: { secretStore: secretStore }
  spec: {
    type: type
    version: version
    metadata: concat(
      type == defaultComponentType ? redisMetadata : [],
      metadata
    )
  }
}

output result result = {
  resources: concat(
    [
      '/planes/kubernetes/local/namespaces/${context.runtime.kubernetes.namespace}/providers/dapr.io/Component/${daprComponent.metadata.name}'
    ],
    type == defaultComponentType ? redisResourceIds : []
  )
  values: {
    type: type
    componentName: daprComponent.metadata.name
  }
}
