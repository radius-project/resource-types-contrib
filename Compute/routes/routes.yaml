namespace: Radius.Compute
types:
  routes:
    description: |
      The Radius.Compute/routes Resource Type defines network routes for responding to external clients. Note that a Routes resource is not required for service-to-service communication. To use Routes, define a Container and ensure a `containerPort` is specified.

      extension radius
      param environment string

      resource myApplication 'Radius.Core/applications@2025-08-01-preview' = { ... }
      
      resource myContainer 'Radius.Compute/containers@2025-08-01-preview' = {
        name: 'myContainer'
        properties: {
          environment: environment
          application: myApplication.id
          containers: {
            frontend: {
              image: 'frontend:1.25'
              ports: {
                web: {
                  containerPort: 8080
                }
              }
            }
            accounts: {
              image: 'accounts:1.25'
              ports: {
                web: {
                  containerPort: 8080
                }
              }
            }
          }
        }
      }

      Then define a Routes resource.

      resource ingressRule 'Radius.Compute/routes@2025-08-01-preview' = {
        name: 'ingressRule'
        properties: {
          application: myApplication.id
          environment: environment
          kind: 'HTTP'
          rules: [
            {
              matches: [
                {
                  httpPath: '/'
                }
              ]
              destinationContainer: {
                resourceId: myContainer.id
                containerName: 'frontend'
                containerPortName: 'web'
              }
            }
          ]
        }
      }

      The hostname is determined by the Recipe. 

      Multiple rules can be included in Routes.

      resource ingressRule 'Radius.Compute/routes@2025-08-01-preview' = {
        name: 'ingressRule'
        properties: {
          application: myApplication.id
          environment: environment
          kind: 'HTTP'
          rules: [
            {
              matches: [
                {
                  httpPath: '/'
                }
              ]
              destinationContainer: {
                resourceId: myContainer.id
                containerName: 'frontend'
                containerPortName: 'web'
              }
            }
            {
              matches: [
                {
                  httpPath: '/accounts'
                }
              ]
              destinationContainer: {
                resourceId: myContainer.id
                containerName: 'accounts'
                containerPortName: 'web'
              }
            }
          ]
        }
      }

    apiVersions:
      '2025-08-01-preview':
        schema: 
          type: object
          properties:
            environment:
              type: string
              description: (Required) The Radius Environment ID. Typically set by the rad CLI. Typically value should be `environment`.
            application:
              type: string
              description: (Required) The Radius Application ID. `myApplication.id` for example.
            kind:
              type: string 
              enum: [HTTP, TCP, TLS, UDP]
              description: (Optional) The type of rule. If not specified, `HTTPRoute` is assumed. `HTTPRoute` provides L7 ingress with support for matching based on the hostname and HTTP header. `TCPRoute` provides L4 ingress with no support for matching (all traffic is forwarded to the Container). `TLSRoute` provides L4 ingress with the ability to match based on Server Name Indication (SNI) which is equivalent to hostname in TLS. `UDPRoute` is similar to TCPRoutes but uses UDP.
            hostnames:
              type: array
              description: (Optional) Use only when kind is HTTP or TLS. When HTTP, match against the HTTP Host header. When using TLS, match against the SNI attribute of TLS ClientHello message. Hostname may be preceded by a * wildcard.
              items:
                type: string
            rules:
              type: array
              description: (Required) Rules define semantics for matching a network connection request based on conditions and forwarding the request to a Container.
              items:
                type: object
                properties:
                  matches:
                    type: array
                    description: (Required) Matches define conditions used for matching a request. 
                    items:
                      type: object
                      properties:
                        httpHeaders:
                          type: array
                          description: (Optional) HTTP headers to match. Specify only when kind is HTTP. Multiple match values are ANDed together. A request must match all the specified headers to match.
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: (Required) The name of the HTTP Header to be matched. Must be exact.
                              value:
                                type: string
                                description: (Required) Value of HTTP Header to be matched.
                            required: [name, value]
                        httpMethod:
                          type: string
                          description: (Optional) The HTTP method to match. Specify only when kind is HTTP. 
                          enum: [GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH]
                        httpPath:
                          type: string
                          description: (Optional) The HTTP request path to match. Trailing space is ignored. Requests for `/abc`, `/abc/`, and ``/abc/def/` will all match `/abc`.
                        httpQueryParams:
                          type: array
                          description: (Optional) HTTP query parameters to match. Specify only when kind is HTTP.
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: (Required) Name of the HTTP query parameter to be matched. Specify only when kind is HTTP.
                              value:
                                type: string
                                description: (Required) Value of the HTTP query parameter to be matched.
                            required: [name, value]
                  destinationContainer:
                    type: object
                    properties:
                      resourceId:
                        type: string
                        description: (Required) The Radius Container resource ID.
                      containerName:
                        type: string
                        description: (Required) The specific container to target within the Container resource.
                      containerPortName:
                        type: string
                        description: (Required) The port name to target from the container.
                    required: [resourceId, containerName, containerPortName]
                required: [matches, destinationContainer]
            listener:
              type: object
              description: (Read Only) The Gateway Listener the route is assigned to.
              readOnly: true
              properties:
                hostname:
                  type: string
                port:
                  type: integer
                protocol:
                  type: string
                  enum: [HTTP, HTTPS, TLS, TCP, UDP]
          required: [environment, application, rules]