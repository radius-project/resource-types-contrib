{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "apiVersion": {
      "type": "string",
      "defaultValue": "2024-09-01-preview",
      "maxLength": 32
    },
    "nGroupsParamName": {
      "type": "string",
      "defaultValue": "nGroups_lin100_reg_lb",
      "maxLength": 64
    },
    "containerGroupProfileName": {
      "type": "string",
      "defaultValue": "cgp_1",
      "maxLength": 64
    },
    "loadBalancerName": {
      "type": "string",
      "defaultValue": "slb_1",
      "maxLength": 64
    },
    "backendAddressPoolName": {
      "type": "string",
      "defaultValue": "bepool_1",
      "maxLength": 64
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "vnet_1",
      "maxLength": 64
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "subnet_1",
      "maxLength": 64
    },
    "networkSecurityGroupName": {
      "type": "string",
      "defaultValue": "nsg_1",
      "maxLength": 64
    },
    "inboundPublicIPName": {
      "type": "string",
      "defaultValue": "inboundPublicIP",
      "maxLength": 64
    },
    "outboundPublicIPName": {
      "type": "string",
      "defaultValue": "outboundPublicIP",
      "maxLength": 64
    },
    "outboundPublicIPPrefixName": {
      "type": "string",
      "defaultValue": "outBoundPublicIPPrefix",
      "metadata": {
        "description": "Name of the NAT gateway public IP"
      }
    },
    "natGatewayName": {
      "type": "string",
      "defaultValue": "natGateway1"
    },
    "frontendIPName": {
      "type": "string",
      "defaultValue": "loadBalancerFrontend",
      "maxLength": 64
    },
    "httpRuleName": {
      "type": "string",
      "defaultValue": "httpRule",
      "maxLength": 64
    },
    "healthProbeName": {
      "type": "string",
      "defaultValue": "healthProbe",
      "maxLength": 64
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.19.0.0/16",
      "maxLength": 64
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.19.1.0/24",
      "maxLength": 64
    },
    "desiredCount": {
      "type": "int",
      "defaultValue": 100
    },
    "zones": {
      "type": "array",
      "defaultValue": []
    },
    "maintainDesiredCount": {
      "type": "bool",
      "defaultValue": true
    }, 
    "domainNameLabel": {
      "type": "string",
      "defaultValue": "ngroupsdemo",
      "maxLength": 64
    },
    "inboundNatRuleName": {
      "type": "string",
      "defaultValue": "inboundNatRule",
      "maxLength": 64
    }
  },
  "variables": {
    "description": "This ARM template is an example template to test the load balancer integration with NGroups.",
    "cgProfileName": "[parameters('containerGroupProfileName')]",
    "prefixCG": "cg-lin100-regional-lb-",
    "nGroupsName": "[parameters('nGroupsParamName')]",
    "resourcePrefix": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/')]",
    "loadBalancerApiVersion": "2022-07-01",
    "vnetApiVersion": "2022-07-01",
    "publicIPVersion": "2022-07-01",
    "ddosProtectionPlanName": "ddosProtectionPlan"
  },
  "resources": [
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.ContainerInstance/containerGroupProfiles",
      "name": "[variables('cgProfileName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": "Standard",
        "containers": [
          {
            "name": "web",
            "properties": {
              "image": "mcr.microsoft.com/azuredocs/aci-helloworld@sha256:565dba8ce20ca1a311c2d9485089d7ddc935dd50140510050345a1b0ea4ffa6e",
              "ports": [
                {
                  "protocol": "TCP",
                  "port": 80
                }
              ],
              "resources": {
                "requests": {
                  "memoryInGB": 1.0,
                  "cpu": 1.0
                }
              }
            }
          }
        ],
        "restartPolicy": "Always",
        "ipAddress": {
          "ports": [
            {
              "protocol": "TCP",
              "port": 80
            }
          ],
          "type": "Private"
        },
        "osType": "Linux"
      }
    },
    {
      "apiVersion": "[parameters('apiVersion')]",
      "type": "Microsoft.ContainerInstance/NGroups",
      "name": "[variables('nGroupsName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.ContainerInstance/containerGroupProfiles/', variables('cgProfileName'))]",
        "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ],
      "properties": {
        "elasticProfile": {
          "desiredCount": "[parameters('desiredCount')]",
          "maintainDesiredCount": "[parameters('maintainDesiredCount')]",
          "containerGroupNamingPolicy": {
            "guidNamingPolicy":{
              "prefix":"[variables('prefixCG')]"
           }
          }
        },
        "containerGroupProfiles": [
          {
            "resource": {
              "id": "[concat(variables('resourcePrefix'), 'Microsoft.ContainerInstance/containerGroupProfiles/', variables('cgProfileName'))]"
            },
            "containerGroupProperties": {
              "subnetIds": [
                {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
                  "name": "[parameters('subnetName')]"
                }
              ]
            },
            "networkProfile": {
              "loadBalancer": {
                "backendAddressPools": [
                  {
                    "resource": {
                      "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('backendAddressPoolName'))]"
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "zones": "[parameters('zones')]",
      "tags": {
        "cirrusTestScenario": "lin-100.regional.loadbalancer", 
        "reprovision.enabled": true
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('publicIPVersion')]",
      "name": "[parameters('inboundPublicIPName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4,
        "ipTags": [],
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainNameLabel')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('publicIPVersion')]",
      "name": "[parameters('outboundPublicIPName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4,
        "ipTags": []
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "[variables('loadBalancerApiVersion')]",
      "name": "[parameters('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('inboundPublicIPName'))]"
              },
              "privateIPAllocationMethod": "Dynamic"
            },
            "name": "[parameters('frontendIPName')]"
          }
        ],
        "backendAddressPools": [
          {
            "name": "[parameters('backendAddressPoolName')]",
            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('backendAddressPoolName'))]",
            "properties": {
              "loadBalancerBackendAddresses": []
            }
          }
        ],
        "probes": [
          {
            "name": "[parameters('healthProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "probeThreshold": 1
            }
          }
        ],
        "loadBalancingRules": [
          {
              "name": "[parameters('httpRuleName')]",
              "properties": {
                  "frontendIPConfiguration": {
                      "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('loadBalancerName'), parameters('frontendIPName'))]"
                  },
                  "frontendPort": 80,
                  "backendPort": 80,
                  "enableFloatingIP": false,
                  "idleTimeoutInMinutes": 15,
                  "protocol": "Tcp",
                  "enableTcpReset": true,
                  "loadDistribution": "Default",
                  "disableOutboundSnat": false,
                  "backendAddressPools": [
                      {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('backendAddressPoolName'))]"
                      }
                  ],
                  "probe": {
                      "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('loadBalancerName'), parameters('healthProbeName'))]" 
                  }
              }
          }
      ],
      "inboundNatRules": [
        {
          "name": "[parameters('inboundNatRuleName')]",
          "properties": {
            "backendAddressPool": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancerName'), parameters('backendAddressPoolName'))]"
            },
            "backendPort": "80",
            "enableFloatingIP": "false",
            "enableTcpReset": "false",
            "frontendIPConfiguration": {
              "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('loadBalancerName'), parameters('frontendIPName'))]"
            },
            "frontendPortRangeEnd": "331",
            "frontendPortRangeStart": "81",
            "idleTimeoutInMinutes": "4",
            "protocol": "Tcp"
          }
        }
      ],
      "outboundRules": [],
      "inboundNatPools": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('inboundPublicIPName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "[variables('vnetApiVersion')]",
      "name": "[parameters('vnetName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]",
        "[resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetAddressPrefix')]",
              "serviceEndpoints": [],
              "delegations": [
                {
                  "name": "Microsoft.ContainerInstance.containerGroups",
                  "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '/delegations/Microsoft.ContainerInstance.containerGroups')]",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  },
                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                }
              ],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
              },
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))]"
              }
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": true,
        "ddosProtectionPlan": {
          "id": "[resourceId('Microsoft.Network/ddosProtectionPlans', variables('ddosProtectionPlanName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/ddosProtectionPlans",
      "apiVersion": "[variables('loadBalancerApiVersion')]",
      "name": "[variables('ddosProtectionPlanName')]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Network/natGateways",
      "apiVersion": "[variables('loadBalancerApiVersion')]",
      "name": "[parameters('natGatewayName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "idleTimeoutInMinutes": 4,
        "publicIpAddresses": [
          {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('outboundPublicIPName'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('outboundPublicIPName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "[variables('loadBalancerApiVersion')]",
      "name": "[parameters('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPInbound",
            "properties": {
                "access": "Allow",
                "description": "Allow Internet traffic on port range",
                "destinationAddressPrefix": "*",
                "destinationPortRanges": ["80-331"],
                "direction": "Inbound",
                "protocol": "*",
                "priority": 100,
                "sourceAddressPrefix": "Internet",
                "sourcePortRange": "*"
            }
          }
        ]
      }
    }
  ]
}
