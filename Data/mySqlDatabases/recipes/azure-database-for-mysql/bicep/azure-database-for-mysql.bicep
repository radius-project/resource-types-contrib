@description('Information about what resource is calling this Recipe. Generated by Radius. For more information visit https://docs.radapp.io/reference/context-schema/ ')
param context object

@description('Name of the MySQL database. Defaults to the application name.')
param database string = context.resource.properties.?database ?? '${context.application.name}'

@maxLength(32)
@description('MySQL username. Defaults to <application-name>_user')
param username string = context.resource.properties.?username ?? '${context.application.name}_user'

@description('The major MySQL server version in the X.Y format. Defaults to the version 8.4 if not provided.')
@allowed([
  '5.7'
  '8.0'
  '8.4'
])
param version string = context.resource.properties.?version ?? '8.4'

@description('The user-defined tags that will be applied to the resource. Default is null.')
param tags object = context.resource.properties.?tags ?? {}

@description('The Radius specific tags that will be applied to the resource')
var radiusTags = {
  'radapp.io-environment': context.environment.id
  'radapp.io-application': context.application == null ? '' : context.application.id
  'radapp.io-resource': context.resource.id
}

@description('Location to deploy the resources')
var location string = resourceGroup().location

@description('Unique name for the MySQL deployment and service.')
var uniqueName = 'mysql-${uniqueString(context.resource.id, resourceGroup().id)}'

@description('The port the MySQL server listens on.')
var port = 3306

@description('MySQL server root password.')
@secure()
param root_password string = uniqueString(context.resource.id, newGuid())

resource mysqlServer 'Microsoft.DBforMySQL/flexibleServers@2024-12-30' = {
  name: uniqueName
  location: location
  tags: union(tags, radiusTags)
  sku: {
    name: 'Standard_B1ms'
    tier: 'Burstable'
  }
  properties: {
    createMode: 'Default'
    version: (version == '8.0') ? '8.0.21' : version
    administratorLogin: username
    administratorLoginPassword: root_password
    databasePort: port
    storage: {
      storageSizeGB: 32
    }
    network: {
      publicNetworkAccess: 'Enabled'
  }
}

  resource mysqlDatabase 'databases' = {
  name: database
  properties: {
    charset: 'utf8'
    collation: 'utf8_general_ci'
  }
}
}


output result object = {
  values: {
    host: mysqlServer.properties.fullyQualifiedDomainName
    port: port
    database: database
    username: username
  }
  secrets: {
    #disable-next-line outputs-should-not-contain-secrets
    password: root_password
  }
}
