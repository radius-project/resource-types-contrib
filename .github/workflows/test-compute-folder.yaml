name: Test Compute Folder

on:
  push:
    branches: [ main ]
    paths: 
      - 'compute/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'compute/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Radius version number to use (e.g. 0.1.0, 0.1.0-rc1, edge). Defaults to edge.'
        required: false
        default: 'edge'
        type: string

env:
  # Server where terraform test modules are deployed
  TF_RECIPE_MODULE_SERVER_URL: "http://tf-module-server.radius-test-tf-module-server.svc.cluster.local"
  # Private Git repository where terraform module for testing is stored.
  TF_RECIPE_PRIVATE_GIT_SOURCE: "git::https://github.com/radius-project/terraform-private-modules//kubernetes-redis"
  # Local Docker registry name
  LOCAL_REGISTRY_NAME: "radius-registry"
  # Local Docker registry server
  LOCAL_REGISTRY_SERVER: "localhost"
  # Local Docker registry port
  LOCAL_REGISTRY_PORT: "51351"
  # TODO: remove in favor of GH env variables
  REL_VERSION: "latest"

jobs:
  test-kubernetes-recipes:
    runs-on: ubuntu-latest
    name: Test Kubernetes Recipes
    env:
      BICEP_RECIPE_TAG_VERSION: "latest"
      PLATFORM: kubernetes
      ENVIRONMENT: kubernetes-env
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Download k3d
        run: wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      - name: Create k3d cluster
        # Map localhost port 80 on the external load balancer, and disable traefik and the internal load balancer.
        run: k3d cluster create --agents 2 -p "80:80@loadbalancer" --k3s-arg "--disable=traefik@server:*" --k3s-arg "--disable=servicelb@server:*" --registry-create reciperegistry:51351
      - name: Set up ORAS
        uses: oras-project/setup-oras@v1
        with:
          version: '1.2.0'
      - name: Verify ORAS installation
        run: oras version
      - name: Download rad CLI
        run: |
          echo "Downloading latest rad CLI"
          wget -q "https://raw.githubusercontent.com/radius-project/radius/main/deploy/install.sh" -O - | /bin/bash -s edge
      
      - name: Publish Bicep Test Recipes
        run: |
          export PATH=$GITHUB_WORKSPACE/bin:$PATH
          which rad || { echo "cannot find rad"; exit 1; }
          make publish-test-bicep-recipes
        env:
          BICEP_RECIPE_REGISTRY: "${{ env.LOCAL_REGISTRY_SERVER }}:${{ env.LOCAL_REGISTRY_PORT }}"
          BICEP_RECIPE_TAG_VERSION: ${{ env.REL_VERSION }}
          PLATFORM: ${{ env.PLATFORM }}
          TEMP_CERT_DIR: ${{ steps.create-local-registry.outputs.temp-cert-dir }}
          SSL_CERT_FILE: ${{ steps.create-local-registry.outputs.temp-cert-dir }}/certs/${{ env.LOCAL_REGISTRY_SERVER }}/client.crt
      # - name: Publish Terraform test recipes
      #   run: |
      #     make publish-test-terraform-recipes

      - name: Initialize default environment
        run: |
          rad install kubernetes --set rp.publicEndpointOverride=localhost
          rad group create default
          rad workspace create kubernetes default --group default
          rad group switch default
          rad env create ${{ env.ENVIRONMENT }}
          rad env switch ${{ env.ENVIRONMENT }}
          
      - name: Verify manifests are registered
        if: env.SKIP_BUILD != 'true'
        run: |
          rm -f registermanifest_logs.txt
          # Find the pod with container "ucp"
          POD_NAME=$(
            kubectl get pods -n radius-system \
              -o jsonpath='{range .items[*]}{.metadata.name}{" "}{.spec.containers[*].name}{"\n"}{end}' \
            | grep "ucp" \
            | head -n1 \
            | cut -d" " -f1
          )
          echo "Found ucp pod: $POD_NAME"

          if [ -z "$POD_NAME" ]; then
            echo "No pod with container 'ucp' found in namespace radius-system."
            exit 1
          fi

          # Poll logs for up to 20 iterations, 30 seconds each (up to 10 minutes total)
          for i in {1..20}; do
            kubectl logs "$POD_NAME" -n radius-system | tee registermanifest_logs.txt > /dev/null

            # Exit on error
            if grep -qi "Service initializer terminated with error" registermanifest_logs.txt; then
              echo "Error found in ucp logs."
              grep -i "Service initializer terminated with error" registermanifest_logs.txt
              exit 1
            fi

            # Check for success
            if grep -q "Successfully registered manifests" registermanifest_logs.txt; then
              echo "Successfully registered manifests - message found."
              break
            fi

            echo "Logs not ready, waiting 30 seconds..."
            sleep 30
          done

          # Final check to ensure success message was found
          if ! grep -q "Successfully registered manifests" registermanifest_logs.txt; then
            echo "Manifests not registered after 10 minutes."
            exit 1
          fi
      - name: Register Bicep recipes for platform
        run: |
          echo "Registering Bicep recipes for ${{ env.PLATFORM }} in environment ${{ env.ENVIRONMENT }}..."
          
          # Find all sub-platforms for this provider (both patterns)
          sub_platforms_nested=$(find ./compute -path "*/recipes/${{ env.PLATFORM }}/*" -type d | grep -v "/bicep$" | grep -v "/terraform$" | sort)
          sub_platforms_direct=$(find ./compute -path "*/recipes/${{ env.PLATFORM }}" -type d | sort)
          
          # For direct pattern (like kubernetes), we need to treat the platform itself as the sub-platform
          all_sub_platforms=""
          if [[ -n "$sub_platforms_nested" ]]; then
            all_sub_platforms="$sub_platforms_nested"
          fi
          if [[ -n "$sub_platforms_direct" ]]; then
            for direct_platform in $sub_platforms_direct; do
              if [[ -d "$direct_platform/bicep" ]] || [[ -d "$direct_platform/terraform" ]]; then
                all_sub_platforms="$all_sub_platforms $direct_platform"
              fi
            done
          fi
          
          if [[ -z "$all_sub_platforms" ]]; then
            echo "No sub-platforms found for ${{ env.PLATFORM }}"
            exit 0
          fi
          
          echo "Found sub-platforms for ${{ env.PLATFORM }}:"
          echo "$all_sub_platforms"
          
          # Register all Bicep recipes
          bicep_recipes_registered=false
          for sub_platform in $all_sub_platforms; do
            # Determine if this is direct pattern (kubernetes) or nested pattern (azure/aci)
            if echo "$sub_platform" | grep -q "/recipes/${{ env.PLATFORM }}$"; then
              # Direct pattern: kubernetes
              sub_platform_name="${{ env.PLATFORM }}"
              resource_type=$(basename "$(dirname "$(dirname "$sub_platform")")")
              bicep_search_path="$sub_platform/bicep"
            else
              # Nested pattern: azure/aci
              sub_platform_name=$(basename "$sub_platform")
              resource_type=$(basename "$(dirname "$(dirname "$(dirname "$sub_platform")")")")
              bicep_search_path="$sub_platform"
            fi
            
            echo ""
            echo "Registering Bicep recipes for sub-platform: $sub_platform_name (resource type: $resource_type)"
            
            # Register all Bicep recipes for this sub-platform
            bicep_files=$(find "$bicep_search_path" -name "*.bicep" -type f 2>/dev/null)
            if [[ -n "$bicep_files" ]]; then
              for bicep_file in $bicep_files; do
                recipe_name=$(basename "$bicep_file" .bicep)
                registry_path="localhost:51351/compute/$resource_type/${{ env.PLATFORM }}/$sub_platform_name/$recipe_name:latest"

                echo "üîÑ Registering Bicep recipe: $recipe_name"
                echo "Registry path: br:$registry_path"
                
                if rad recipe register default --environment "${{ env.ENVIRONMENT }}" --resource-type "Radius.Compute/$resource_type" --template-kind bicep --template-path "br:$registry_path"; then
                  echo "‚úÖ Successfully registered Bicep recipe: $recipe_name"
                  bicep_recipes_registered=true
                else
                  echo "‚ùå Failed to register Bicep recipe: $recipe_name"
                  exit 1
                fi
              done
            else
              echo "No Bicep recipes found in $sub_platform_name"
            fi
          done
          
          if [[ "$bicep_recipes_registered" == "true" ]]; then
            echo ""
            echo "‚úÖ Completed registering all Bicep recipes for ${{ env.PLATFORM }}"
          else
            echo ""
            echo "‚ÑπÔ∏è No Bicep recipes found to register for ${{ env.PLATFORM }}"
          fi

      - name: Deploy test application
        run: |
          echo "Deploying test application to validate registered recipes..."
          
          # Verify environment configuration
          echo "Verifying environment configuration..."
          rad env show ${{ env.ENVIRONMENT }}
          
          # Deploy the test app.bicep file
          if rad deploy ./test/app/app.bicep --environment ${{ env.ENVIRONMENT }}; then
            echo "‚úÖ Successfully deployed test application"
            
            # List applications to verify deployment
            echo "Listing deployed applications:"
            rad app list --environment ${{ env.ENVIRONMENT }}
          else
            echo "‚ùå Failed to deploy test application"
            exit 1
          fi

      - name: List registered recipes for environment
        run: |
          echo "Listing all recipes registered in environment ${{ env.ENVIRONMENT }}..."
          
          if rad recipe list --environment ${{ env.ENVIRONMENT }}; then
            echo "‚úÖ Successfully listed recipes for ${{ env.ENVIRONMENT }}"
          else
            echo "‚ùå Failed to list recipes for ${{ env.ENVIRONMENT }}"
            exit 1
          fi

  # test-azure-recipes:
  #   runs-on: ubuntu-latest
  #   name: Test Azure Recipes
  #   env:
  #     BICEP_RECIPE_TAG_VERSION: "latest"
  #     PLATFORM: azure
  #     ENVIRONMENT: azure-env
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #     - name: Download k3d
  #       run: wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
  #     - name: Create k3d cluster
  #       # Map localhost port 80 on the external load balancer, and disable traefik and the internal load balancer.
  #       run: k3d cluster create --agents 2 -p "80:80@loadbalancer" --k3s-arg "--disable=traefik@server:*" --k3s-arg "--disable=servicelb@server:*" --registry-create reciperegistry:51351
  #     - name: Set up ORAS
  #       uses: oras-project/setup-oras@v1
  #       with:
  #         version: '1.2.0'
  #     - name: Verify ORAS installation
  #       run: oras version
  #     - name: Download rad CLI
  #       run: |
  #         echo "Downloading latest rad CLI"
  #         wget -q "https://raw.githubusercontent.com/radius-project/radius/main/deploy/install.sh" -O - | /bin/bash -s edge
      
  #     - name: Publish Bicep Test Recipes
  #       run: |
  #         export PATH=$GITHUB_WORKSPACE/bin:$PATH
  #         which rad || { echo "cannot find rad"; exit 1; }
  #         make publish-test-bicep-recipes
  #       env:
  #         BICEP_RECIPE_REGISTRY: "${{ env.LOCAL_REGISTRY_SERVER }}:${{ env.LOCAL_REGISTRY_PORT }}"
  #         BICEP_RECIPE_TAG_VERSION: ${{ env.REL_VERSION }}
  #         PLATFORM: ${{ env.PLATFORM }}
  #         TEMP_CERT_DIR: ${{ steps.create-local-registry.outputs.temp-cert-dir }}
  #         SSL_CERT_FILE: ${{ steps.create-local-registry.outputs.temp-cert-dir }}/certs/${{ env.LOCAL_REGISTRY_SERVER }}/client.crt

  #     - name: Initialize default environment
  #       run: |
  #         rad install kubernetes --set rp.publicEndpointOverride=localhost
  #         rad group create default
  #         rad workspace create kubernetes default --group default
  #         rad group switch default
  #         rad env create ${{ env.ENVIRONMENT }}
  #         rad env switch ${{ env.ENVIRONMENT }}
          
  #     # TODO: Configure Azure provider
  #     - name: Configure Azure provider
  #       run: |
  #         echo "TODO: Configure Azure provider for environment ${{ env.ENVIRONMENT }}"
  #         # rad env update ${{ env.ENVIRONMENT }} --provider azure
          
  #     - name: Register and test Bicep recipes for platform
  #       run: |
  #         echo "Registering and testing Bicep recipes for ${{ env.PLATFORM }} in environment ${{ env.ENVIRONMENT }}..."
          
  #         # Find all sub-platforms for this provider (both patterns)
  #         sub_platforms_nested=$(find ./compute -path "*/recipes/${{ env.PLATFORM }}/*" -type d | grep -v "/bicep$" | grep -v "/terraform$" | sort)
  #         sub_platforms_direct=$(find ./compute -path "*/recipes/${{ env.PLATFORM }}" -type d | sort)
          
  #         # For direct pattern (like kubernetes), we need to treat the platform itself as the sub-platform
  #         all_sub_platforms=""
  #         if [[ -n "$sub_platforms_nested" ]]; then
  #           all_sub_platforms="$sub_platforms_nested"
  #         fi
  #         if [[ -n "$sub_platforms_direct" ]]; then
  #           for direct_platform in $sub_platforms_direct; do
  #             if [[ -d "$direct_platform/bicep" ]] || [[ -d "$direct_platform/terraform" ]]; then
  #               all_sub_platforms="$all_sub_platforms $direct_platform"
  #             fi
  #           done
  #         fi
          
  #         if [[ -z "$all_sub_platforms" ]]; then
  #           echo "No sub-platforms found for ${{ env.PLATFORM }}"
  #           exit 0
  #         fi
          
  #         echo "Found sub-platforms for ${{ env.PLATFORM }}:"
  #         echo "$all_sub_platforms"
          
  #         # Register and test each Bicep recipe individually
  #         bicep_recipes_tested=false
  #         for sub_platform in $all_sub_platforms; do
  #           # Determine if this is direct pattern (kubernetes) or nested pattern (azure/aci)
  #           if echo "$sub_platform" | grep -q "/recipes/${{ env.PLATFORM }}$"; then
  #             # Direct pattern: kubernetes
  #             sub_platform_name="${{ env.PLATFORM }}"
  #             resource_type=$(basename "$(dirname "$(dirname "$sub_platform")")")
  #             bicep_search_path="$sub_platform/bicep"
  #           else
  #             # Nested pattern: azure/aci
  #             sub_platform_name=$(basename "$sub_platform")
  #             resource_type=$(basename "$(dirname "$(dirname "$(dirname "$sub_platform")")")")
  #             bicep_search_path="$sub_platform"
  #           fi
            
  #           echo ""
  #           echo "Processing Bicep recipes for sub-platform: $sub_platform_name (resource type: $resource_type)"
            
  #           # Register and test each Bicep recipe individually
  #           bicep_files=$(find "$bicep_search_path" -name "*.bicep" -type f 2>/dev/null)
  #           if [[ -n "$bicep_files" ]]; then
  #             for bicep_file in $bicep_files; do
  #               recipe_name=$(basename "$bicep_file" .bicep)
  #               registry_path="localhost:51351/compute/$resource_type/${{ env.PLATFORM }}/$sub_platform_name/$recipe_name:latest"

  #               echo ""
  #               echo "üîÑ Registering Bicep recipe: $recipe_name"
  #               echo "Registry path: br:$registry_path"
                
  #               if rad recipe register default --environment "${{ env.ENVIRONMENT }}" --resource-type "Radius.Compute/$resource_type" --template-kind bicep --template-path "br:$registry_path"; then
  #                 echo "‚úÖ Successfully registered Bicep recipe: $recipe_name"
                  
  #                 # Immediately test this recipe by deploying the test application
  #                 echo "üöÄ Testing recipe $recipe_name by deploying test application..."
                  
  #                 if rad deploy ./test/app/app.bicep --environment ${{ env.ENVIRONMENT }}; then
  #                   echo "‚úÖ Successfully deployed test application with recipe: $recipe_name"
  #                   bicep_recipes_tested=true
                    
  #                   # List applications to verify deployment
  #                   echo "Listing deployed applications:"
  #                   rad app list --environment ${{ env.ENVIRONMENT }}
  #                 else
  #                   echo "‚ùå Failed to deploy test application with recipe: $recipe_name"
  #                   exit 1
  #                 fi
  #               else
  #                 echo "‚ùå Failed to register Bicep recipe: $recipe_name"
  #                 exit 1
  #               fi
  #             done
  #           else
  #             echo "No Bicep recipes found in $sub_platform_name"
  #           fi
  #         done
          
  #         if [[ "$bicep_recipes_tested" == "true" ]]; then
  #           echo ""
  #           echo "‚úÖ Completed registering and testing all Bicep recipes for ${{ env.PLATFORM }}"
  #         else
  #           echo ""
  #           echo "‚ÑπÔ∏è No Bicep recipes found to test for ${{ env.PLATFORM }}"
  #         fi

  # test-aws-recipes:
  #   runs-on: ubuntu-latest
  #   name: Test AWS Recipes
  #   env:
  #     BICEP_RECIPE_TAG_VERSION: "latest"
  #     PLATFORM: aws
  #     ENVIRONMENT: aws-env
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #     - name: Download k3d
  #       run: wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
  #     - name: Create k3d cluster
  #       # Map localhost port 80 on the external load balancer, and disable traefik and the internal load balancer.
  #       run: k3d cluster create --agents 2 -p "80:80@loadbalancer" --k3s-arg "--disable=traefik@server:*" --k3s-arg "--disable=servicelb@server:*" --registry-create reciperegistry:51351
  #     - name: Set up ORAS
  #       uses: oras-project/setup-oras@v1
  #       with:
  #         version: '1.2.0'
  #     - name: Verify ORAS installation
  #       run: oras version
  #     - name: Download rad CLI
  #       run: |
  #         echo "Downloading latest rad CLI"
  #         wget -q "https://raw.githubusercontent.com/radius-project/radius/main/deploy/install.sh" -O - | /bin/bash -s edge
      
  #     - name: Publish Bicep Test Recipes
  #       run: |
  #         export PATH=$GITHUB_WORKSPACE/bin:$PATH
  #         which rad || { echo "cannot find rad"; exit 1; }
  #         make publish-test-bicep-recipes
  #       env:
  #         BICEP_RECIPE_REGISTRY: "${{ env.LOCAL_REGISTRY_SERVER }}:${{ env.LOCAL_REGISTRY_PORT }}"
  #         BICEP_RECIPE_TAG_VERSION: ${{ env.REL_VERSION }}
  #         PLATFORM: ${{ env.PLATFORM }}
  #         TEMP_CERT_DIR: ${{ steps.create-local-registry.outputs.temp-cert-dir }}
  #         SSL_CERT_FILE: ${{ steps.create-local-registry.outputs.temp-cert-dir }}/certs/${{ env.LOCAL_REGISTRY_SERVER }}/client.crt

  #     - name: Initialize default environment
  #       run: |
  #         rad install kubernetes --set rp.publicEndpointOverride=localhost
  #         rad group create default
  #         rad workspace create kubernetes default --group default
  #         rad group switch default
  #         rad env create ${{ env.ENVIRONMENT }}
  #         rad env switch ${{ env.ENVIRONMENT }}
          
  #     # TODO: Configure AWS provider
  #     - name: Configure AWS provider
  #       run: |
  #         echo "TODO: Configure AWS provider for environment ${{ env.ENVIRONMENT }}"
  #         # rad env update ${{ env.ENVIRONMENT }} --provider aws
          
  #     - name: Register and test Bicep recipes for platform
  #       run: |
  #         echo "Registering and testing Bicep recipes for ${{ env.PLATFORM }} in environment ${{ env.ENVIRONMENT }}..."
          
  #         # Find all sub-platforms for this provider (both patterns)
  #         sub_platforms_nested=$(find ./compute -path "*/recipes/${{ env.PLATFORM }}/*" -type d | grep -v "/bicep$" | grep -v "/terraform$" | sort)
  #         sub_platforms_direct=$(find ./compute -path "*/recipes/${{ env.PLATFORM }}" -type d | sort)
          
  #         # For direct pattern (like kubernetes), we need to treat the platform itself as the sub-platform
  #         all_sub_platforms=""
  #         if [[ -n "$sub_platforms_nested" ]]; then
  #           all_sub_platforms="$sub_platforms_nested"
  #         fi
  #         if [[ -n "$sub_platforms_direct" ]]; then
  #           for direct_platform in $sub_platforms_direct; do
  #             if [[ -d "$direct_platform/bicep" ]] || [[ -d "$direct_platform/terraform" ]]; then
  #               all_sub_platforms="$all_sub_platforms $direct_platform"
  #             fi
  #           done
  #         fi
          
  #         if [[ -z "$all_sub_platforms" ]]; then
  #           echo "No sub-platforms found for ${{ env.PLATFORM }}"
  #           exit 0
  #         fi
          
  #         echo "Found sub-platforms for ${{ env.PLATFORM }}:"
  #         echo "$all_sub_platforms"
          
  #         # Register and test each Bicep recipe individually
  #         bicep_recipes_tested=false
  #         for sub_platform in $all_sub_platforms; do
  #           # Determine if this is direct pattern (kubernetes) or nested pattern (azure/aci)
  #           if echo "$sub_platform" | grep -q "/recipes/${{ env.PLATFORM }}$"; then
  #             # Direct pattern: kubernetes
  #             sub_platform_name="${{ env.PLATFORM }}"
  #             resource_type=$(basename "$(dirname "$(dirname "$sub_platform")")")
  #             bicep_search_path="$sub_platform/bicep"
  #           else
  #             # Nested pattern: azure/aci
  #             sub_platform_name=$(basename "$sub_platform")
  #             resource_type=$(basename "$(dirname "$(dirname "$(dirname "$sub_platform")")")")
  #             bicep_search_path="$sub_platform"
  #           fi
            
  #           echo ""
  #           echo "Processing Bicep recipes for sub-platform: $sub_platform_name (resource type: $resource_type)"
            
  #           # Register and test each Bicep recipe individually
  #           bicep_files=$(find "$bicep_search_path" -name "*.bicep" -type f 2>/dev/null)
  #           if [[ -n "$bicep_files" ]]; then
  #             for bicep_file in $bicep_files; do
  #               recipe_name=$(basename "$bicep_file" .bicep)
  #               registry_path="localhost:51351/compute/$resource_type/${{ env.PLATFORM }}/$sub_platform_name/$recipe_name:latest"

  #               echo ""
  #               echo "üîÑ Registering Bicep recipe: $recipe_name"
  #               echo "Registry path: br:$registry_path"
                
  #               if rad recipe register default --environment "${{ env.ENVIRONMENT }}" --resource-type "Radius.Compute/$resource_type" --template-kind bicep --template-path "br:$registry_path"; then
  #                 echo "‚úÖ Successfully registered Bicep recipe: $recipe_name"
                  
  #                 # Immediately test this recipe by deploying the test application
  #                 echo "üöÄ Testing recipe $recipe_name by deploying test application..."
                  
  #                 if rad deploy ./test/app/app.bicep --environment ${{ env.ENVIRONMENT }}; then
  #                   echo "‚úÖ Successfully deployed test application with recipe: $recipe_name"
  #                   bicep_recipes_tested=true
                    
  #                   # List applications to verify deployment
  #                   echo "Listing deployed applications:"
  #                   rad app list --environment ${{ env.ENVIRONMENT }}
  #                 else
  #                   echo "‚ùå Failed to deploy test application with recipe: $recipe_name"
  #                   exit 1
  #                 fi
  #               else
  #                 echo "‚ùå Failed to register Bicep recipe: $recipe_name"
  #                 exit 1
  #               fi
  #             done
  #           else
  #             echo "No Bicep recipes found in $sub_platform_name"
  #           fi
  #         done
          
  #         if [[ "$bicep_recipes_tested" == "true" ]]; then
  #           echo ""
  #           echo "‚úÖ Completed registering and testing all Bicep recipes for ${{ env.PLATFORM }}"
  #         else
  #           echo ""
  #           echo "‚ÑπÔ∏è No Bicep recipes found to test for ${{ env.PLATFORM }}"
  #         fi