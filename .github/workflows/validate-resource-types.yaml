name: Validate Resource Types

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Radius version number to use (e.g. 0.1.0, 0.1.0-rc1, edge). Defaults to edge.'
        required: false
        default: 'edge'
        type: string

jobs:
  validate-resource-types:
    runs-on: ubuntu-latest
    name: Validate Resource Type Schemas
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Download k3d
        run: wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      - name: Create k3d cluster
        # Map localhost port 80 on the external load balancer, and disable traefik and the internal load balancer.
        run: k3d cluster create --agents 2 -p "80:80@loadbalancer" --k3s-arg "--disable=traefik@server:*" --k3s-arg "--disable=servicelb@server:*" --registry-create reciperegistry:51351
      - name: Set up ORAS
        uses: oras-project/setup-oras@v1
        with:
          version: '1.2.0'
      - name: Verify ORAS installation
        run: oras version
      - name: Download rad CLI
        # TODO: remove URL and use environment variable
        run: |
          echo "Downloading latest rad CLI"
          wget -q "https://raw.githubusercontent.com/radius-project/radius/main/deploy/install.sh" -O - | /bin/bash -s edge
      - name: Initialize default environment
        run: |
          rad install kubernetes --set rp.publicEndpointOverride=localhost
          rad group create default
          rad workspace create kubernetes default --group default
          rad group switch default
          rad env create default
          rad env switch default

      - name: Create resource types from core folder
        run: |
          echo "Finding YAML files in core folder..."
          core_yaml_files=$(find ./core -name "*.yaml" -type f)
          
          if [[ -z "$core_yaml_files" ]]; then
            echo "No YAML files found in core folder"
            exit 0
          fi
          
          echo "Found YAML files:"
          echo "$core_yaml_files"
          
          echo "Creating resource types..."
          for yaml_file in $core_yaml_files; do
            echo "Processing $yaml_file..."
            
            # Extract resource type name from the file path for naming
            # e.g., ./core/containers/containers.yaml -> containers
            resource_name=$(basename "$yaml_file" .yaml)
            
            echo "Creating resource type '$resource_name' from $yaml_file..."
            if rad resource-type create "$resource_name" -f "$yaml_file"; then
              echo "✅ Successfully created resource type: $resource_name"
            else
              echo "❌ Failed to create resource type: $resource_name"
              exit 1
            fi
          done
          
          echo "✅ All resource types created successfully"

      - name: Verify expected resource types are present
        run: |
          echo "Listing all resource types..."
          rad resource-type list
          
          echo "Verifying expected resource types..."
          
          # Define expected resource types
          expected_resource_types=(
            "Radius.Compute/containers"
          )
          
          # Get the list of resource types
          resource_type_list=$(rad resource-type list)
          
          verification_failed=false
          
          for expected_type in "${expected_resource_types[@]}"; do
            echo "Checking for resource type: $expected_type"
            
            if echo "$resource_type_list" | grep -q "$expected_type"; then
              echo "✅ Found resource type: $expected_type"
            else
              echo "❌ Missing resource type: $expected_type"
              verification_failed=true
            fi
          done
          
          if [[ "$verification_failed" == "true" ]]; then
            echo "❌ Resource type verification failed"
            echo "Expected resource types not found in the list"
            exit 1
          else
            echo "✅ All expected resource types are present"
          fi

      - name: Publish Bicep extensions
        run: |
          echo "Publishing Bicep extensions for all YAML files..."
          core_yaml_files=$(find ./core -name "*.yaml" -type f)
          
          if [[ -z "$core_yaml_files" ]]; then
            echo "No YAML files found in core folder"
            exit 0
          fi
          
          for yaml_file in $core_yaml_files; do
            echo "Publishing extension for $yaml_file..."
            
            # Extract resource type name from the file path for naming
            # e.g., ./core/containers/containers.yaml -> containers
            resource_name=$(basename "$yaml_file" .yaml)
            extension_name="${resource_name}-extension"
            
            echo "Publishing extension '$extension_name.tgz' from $yaml_file..."
            if rad bicep publish-extension -f "$yaml_file" --target "$extension_name.tgz"; then
              echo "✅ Successfully published extension: $extension_name.tgz"
            else
              echo "❌ Failed to publish extension: $extension_name.tgz"
              exit 1
            fi
          done
          
          echo "✅ All Bicep extensions published successfully"

      - name: Update bicepconfig.json with published extensions
        run: |
          echo "Updating bicepconfig.json with published extensions..."
          
          # Find all published .tgz files and add them to bicepconfig.json
          tgz_files=$(find . -name "*-extension.tgz" -type f)
          
          if [[ -n "$tgz_files" ]]; then
            echo "Found extension files to add to bicepconfig.json:"
            echo "$tgz_files"
            
            # Use jq to add each extension to the config
            for tgz_file in $tgz_files; do
              # Extract resource name from filename (e.g., "./containers-extension.tgz" -> "containers")
              resource_name=$(basename "$tgz_file" -extension.tgz)
              
              echo "Adding extension '$resource_name' with file '$tgz_file' to bicepconfig.json..."
              
              # Update bicepconfig.json using jq
              jq --arg name "$resource_name" --arg path "$tgz_file" \
                '.extensions[$name] = $path' bicepconfig.json > bicepconfig.tmp && \
                mv bicepconfig.tmp bicepconfig.json
            done
            
            echo "✅ Successfully updated bicepconfig.json with extensions"
          else
            echo "No extension .tgz files found to add to bicepconfig.json"
          fi
          
          echo "Final bicepconfig.json content:"
          cat bicepconfig.json

      - name: Deploy and validate recipes
        run: |
          echo "Finding and deploying recipe files..."
          
          # Find all Bicep files in recipes folders
          bicep_recipes=$(find . -path "*/recipes/*" -name "*.bicep" -type f)
          
          # Find all Terraform files in recipes folders
          terraform_recipes=$(find . -path "*/recipes/*" -name "*.tf" -type f)
          
          deployment_failed=false
          
          # Deploy Bicep recipes
          if [[ -n "$bicep_recipes" ]]; then
            echo "Found Bicep recipe files:"
            echo "$bicep_recipes"
            
            for bicep_file in $bicep_recipes; do
              echo "Deploying Bicep recipe: $bicep_file"
              
              # Extract recipe name from file path for deployment naming
              recipe_name=$(basename "$bicep_file" .bicep)
              deployment_name="recipe-test-${recipe_name}-$(date +%s)"
              
              if rad deploy "$bicep_file" --application "$deployment_name"; then
                echo "✅ Successfully deployed Bicep recipe: $bicep_file"
                
                # Clean up the deployment
                echo "Cleaning up deployment: $deployment_name"
                rad app delete "$deployment_name" --yes || echo "⚠️ Failed to clean up deployment: $deployment_name"
              else
                echo "❌ Failed to deploy Bicep recipe: $bicep_file"
                deployment_failed=true
              fi
            done
          else
            echo "No Bicep recipe files found in recipes folders"
          fi
          
          # Deploy Terraform recipes
          if [[ -n "$terraform_recipes" ]]; then
            echo "Found Terraform recipe files:"
            echo "$terraform_recipes"
            
            for tf_file in $terraform_recipes; do
              echo "Validating Terraform recipe: $tf_file"
              
              # Get directory containing the Terraform file
              tf_dir=$(dirname "$tf_file")
              
              # Basic Terraform validation
              cd "$tf_dir"
              
              if terraform init && terraform validate; then
                echo "✅ Successfully validated Terraform recipe: $tf_file"
              else
                echo "❌ Failed to validate Terraform recipe: $tf_file"
                deployment_failed=true
              fi
              
              # Return to repository root
              cd - > /dev/null
            done
          else
            echo "No Terraform recipe files found in recipes folders"
          fi
          
          if [[ "$deployment_failed" == "true" ]]; then
            echo "❌ Recipe deployment/validation failed"
            exit 1
          else
            echo "✅ All recipes deployed/validated successfully"
          fi
